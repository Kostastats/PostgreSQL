/* Задание 1. Сделайте запрос к таблице payment и с помощью оконных функций добавьте вычисляемые колонки согласно условиям:
· Пронумеруйте все платежи от 1 до N по дате
· Пронумеруйте платежи для каждого покупателя, сортировка платежей должна быть по дате
· Посчитайте нарастающим итогом сумму всех платежей для каждого покупателя, сортировка должна быть сперва по дате платежа, а затем по сумме платежа от наименьшей к большей
· Пронумеруйте платежи для каждого покупателя по стоимости платежа от наибольших к меньшим так, чтобы платежи с одинаковым значением имели одинаковое значение номера.
Можно составить на каждый пункт отдельный SQL-запрос, а можно объединить все колонки в одном запросе. */

select customer_id , payment_id , payment_date ,
			row_number()over(order by payment_date ) as column_1,
			row_number()over(partition by customer_id order by payment_date) as column_2,
			sum(amount)over(partition by customer_id order by payment_date, amount) as column_3, 
			dense_rank()over(partition by customer_id order by amount desc) column_4
from payment p 

/* Задание 2. С помощью оконной функции выведите для каждого покупателя стоимость платежа и стоимость платежа из предыдущей строки со значением по умолчанию 0.0 с сортировкой по дате. */

select customer_id , payment_id , payment_date , amount,
	coalesce(lag(amount)over(partition by customer_id), 0) last_amount
from payment p 
order by customer_id 

/* Задание 3. С помощью оконной функции определите, на сколько каждый следующий платеж покупателя больше или меньше текущего. */


select customer_id , payment_id , payment_date , amount,
	(amount - coalesce(lead(amount)over(partition by customer_id), 0)) difference
from payment p 
order by customer_id 


/* Задание 4. С помощью оконной функции для каждого покупателя выведите данные о его последней оплате аренды. */

	
select customer_id,
	payment_id,
	payment_date, 
	amount
from (
	select customer_id, payment_id , payment_date, amount,
		row_number() over (partition by customer_id order by payment_date desc)
	from payment 
	order by customer_id) t
where row_number = 1
	 














